global !p
def classname(filename):
    path_elements = filename.split('/')

    class_elements = []
    found_manifests = False
    for eachElement in reversed(path_elements):
        if eachElement == 'manifests':
            found_manifests = True
            continue

        class_elements.append(eachElement)
        if found_manifests:
            break

    if found_manifests:
        class_name = "::".join(reversed(class_elements))
    else:
        class_name = class_elements[0]

    # take the .pp off the end
    class_name = class_name.replace('.pp', '')
    # if the end has ::init, we're in init.pp
    class_name = class_name.replace('::init', '')

    return class_name

endglobal

snippet /^class/ "Class declaration" !r
class ${1:`!p snip.rv = classname(vim.current.buffer.name) `} {
    ${0:# body}
}
endsnippet

snippet /^define/ "Define declaration" !r
define ${1:`!p snip.rv = classname(vim.current.buffer.name) `} (${2:args}) {
    ${0:# body}
}
endsnippet

snippet user "user resource type" !b
group { "${1:username}":
    ensure     => ${2:present},
    uid        => ${3:uid},
    gid        => ${4:gid},
    comment    => '${5:gecos}',
    home       => '${6:homedirectory}',
    managehome => false,
    require    => Group['${7:group}'],
endsnippet
